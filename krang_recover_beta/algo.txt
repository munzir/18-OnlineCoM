In Dart:
Input:
Output: Phi matrix as a file
        Each row vector (i.e. line in the file) would be the phi vector from a
single data point (i.e. pose)

% B is the vector with all the weights (masses and torques of each link)
? B = 1x
idealB = ?
N = dim(idealB)
numperturbedRobots = N

%Instantiate "ideal" robot and N other robots
idealRobot = robot
perturbedRobotArray = array of N robots
% Perturb individual values in B array for each perturbedRobot
perturbValue = 10^-17
int i = 0;
for i;i<N;i++ {
    idealB = (idealRobot->B)(i)
    (guessRobots(i)->B)(i) = idealB + h
}

% Read q values from a text file
% Line by line convert file q vector into dart q vector
numLines = get from file parser object
numdatapoints = numLines;
int line = 0;
dartqarray = array of numLines by dartq's
for line<numLine;line++ {
    dartq(1) = transform(fileq(1));
    ...
    ...
}

phiArray = ??
int pose = 0;
for pose < numDataPoints{

    %Set position of real robot to dartqarray(pose)
    realRobot->setPosition(dartqarray(pose))
    realRobotxCOM = (realRobot->getCom())(0)

    %Set position of all pert robots to dartqarray(pose)
    int perturbedrobotNum = 0;
    % INitiliaze phivec for each pose
    phivec = [];
    for perturbedrobotNum<numPerturbed {
        perturbedRobot = perturbedRobotArray[perturbedRobotNum]
        perturbedRoboti->setPosition(dartqarray(pose));
        pertRobotxCOM = (perturbedROboti->getCom())(0)
        phi = (pertRobotxCOM - realRobotxCOM)/perturbedValue;
        % Add phi to phivec for each pose
        phivec = [phivec, phi]
    }
    %combine phivec into phiarray
    phiarray = [phiarray, phivec]

}
